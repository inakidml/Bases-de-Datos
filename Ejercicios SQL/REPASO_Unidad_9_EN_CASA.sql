--Repaso PL/SQL

--ejercicio 1
--a ok
--b no, cada declaracion en una linea
--c si not null, hay que asignarle valor, con default o :=
--d boolean -> true or false
--e ok
--f no, mal el orden

--ejercicio 2

--a v_weight=2
--b 'western europe'
--c 601
--d 'product 10012 is in stock'
--e 

--ejercicio 3
SET SERVEROUTPUT ON;
BEGIN
DBMS_OUTPUT.PUT_LINE('HOLA MUNDO');
END;

--EJERCICO 4
DECLARE
V_APELLIDO EMPLE.APELLIDO%TYPE;
V_EMP_NO EMPLE.EMP_NO%TYPE;
BEGIN
SELECT APELLIDO, EMP_NO INTO V_APELLIDO, V_EMP_NO FROM EMPLE WHERE EMP_NO=7839;
DBMS_OUTPUT.PUT_LINE(V_APELLIDO ||' ---> ' ||V_EMP_NO);
END;

--EJERCICIO 5
DESC DEPART;
DECLARE
V_NUM_DEPART DEPART.DEPT_NO%TYPE;
BEGIN
SELECT MAX(DEPT_NO) INTO V_NUM_DEPART FROM DEPART;
DBMS_OUTPUT.PUT_LINE(V_NUM_DEPART);
END;

--EJERCICIO 6
DECLARE
V_NUM_EMPLE NUMBER(4);
BEGIN
SELECT COUNT(*) INTO V_NUM_EMPLE FROM EMPLE;
DBMS_OUTPUT.PUT_LINE(V_NUM_EMPLE);
END;

--EJERCICIO 7
SELECT * FROM DEPART;
DECLARE
V_DNOMBRE DEPART.DNOMBRE%TYPE:= 'EDUCACION';
V_NEW_DEPT_NO DEPART.DEPT_NO%TYPE;
BEGIN
SELECT (MAX(DEPT_NO)+10) INTO V_NEW_DEPT_NO from depart;
INSERT INTO DEPART VALUES(V_NEW_DEPT_NO, V_DNOMBRE, NULL);
END;

--EJERCICIO 8
DECLARE
V_NUEVA_LOC DEPART.LOC%TYPE:='VITORIA';
BEGIN
UPDATE DEPART SET LOC=V_NUEVA_LOC WHERE DEPT_NO=50;
IF SQL%FOUND THEN
DBMS_OUTPUT.PUT_LINE('LOCALIDAD MOIFICADA');
END IF;
END;

--EJERCICIO 9
DECLARE
BEGIN
DELETE FROM DEPART WHERE LOC LIKE 'VITORIA';
DBMS_OUTPUT.PUT_LINE('NUMERO DE FILAS ELIMINADAS' || SQL%ROWCOUNT);
EXCEPTION
      WHEN no_data_found THEN
        DBMS_OUTPUT.PUT_LINE('NINGUNA FILA ENCONTRADA');
END;


--ejercicio 10
SELECT * FROM EMPLE;
DECLARE
V_INCR_SALARIO EMPLE.SALARIO%TYPE;
BEGIN
SELECT MIN(SALARIO) INTO V_INCR_SALARIO FROM EMPLE;
UPDATE EMPLE SET SALARIO = SALARIO + V_INCR_SALARIO WHERE DEPT_NO=30;
END;

--EJERCICIO 11
DECLARE
V_SALARIO_MEDIO EMPLE.SALARIO%TYPE;
BEGIN
SELECT AVG(SALARIO) INTO V_SALARIO_MEDIO FROM EMPLE;
UPDATE EMPLE SET SALARIO = SALARIO + SALARIO/10 WHERE SALARIO<V_SALARIO_MEDIO;
END;

--EJERCICIO 12
create table MENSAJES(NUMEROS NUMBER(2));
DECLARE
NUMERO NUMBER;
BEGIN
FOR N IN 1..10
LOOP
IF N >=1 AND N<=10 AND N <> 6 AND N <> 8 THEN
INSERT INTO MENSAJES VALUES(N);
END IF;
END LOOP;
END;
SELECT * FROM MENSAJES;

--EJERCICIO 13
DECLARE
V_SUELDO_EMPLEADO EMPLE.SALARIO%TYPE;

BEGIN
SELECT SALARIO INTO V_SUELDO_EMPLEADO FROM EMPLE WHERE EMP_NO=7521;
CASE 
  WHEN V_SUELDO_EMPLEADO <200000 THEN
  DBMS_OUTPUT.PUT_LINE('LA COMISION SERA = ' || V_SUELDO_EMPLEADO/10);
  WHEN V_SUELDO_EMPLEADO>200000 AND  300000 > V_SUELDO_EMPLEADO THEN
  DBMS_OUTPUT.PUT_LINE('LA COMISION SERA = ' || V_SUELDO_EMPLEADO/15);
  WHEN V_SUELDO_EMPLEADO > 300000 THEN
  DBMS_OUTPUT.PUT_LINE('LA COMISION SERA = ' || V_SUELDO_EMPLEADO/20);
  ELSE NULL;
  DBMS_OUTPUT.PUT_LINE('LA COMISION SERA = ' || 0);
END CASE;
END;

--EJERCICIO 14
CREATE TABLE EMP2 AS SELECT * FROM EMPLE;
ALTER TABLE EMP2 ADD STARS VARCHAR2(50);
SELECT * FROM EMP2;

DECLARE
NUM_AST NUMBER(2);
V_STARS EMP2.STARS%TYPE;
BEGIN
SELECT ROUND(SALARIO/100000) INTO NUM_AST FROM EMPLE WHERE EMP_NO=7902;
FOR N IN 1..NUM_AST
LOOP
V_STARS:=V_STARS || '*';
UPDATE EMP2 SET STARS = V_STARS WHERE  EMP_NO=7902;
END LOOP;
END;

--EJERCICIO 15

BEGIN
FOR EMPLEADO IN (SELECT APELLIDO, FECHA_ALT FROM EMPLE ORDER BY APELLIDO)
LOOP
DBMS_OUTPUT.PUT_LINE(EMPLEADO.APELLIDO ||' '|| EMPLEADO.FECHA_ALT);
END LOOP;
END;

DECLARE
CURSOR EMPLEADO IS SELECT APELLIDO, FECHA_ALT FROM EMPLE ORDER BY APELLIDO;
REG_EMPLE EMPLEADO%ROWTYPE;
BEGIN
OPEN EMPLEADO;
FETCH EMPLEADO INTO REG_EMPLE;
WHILE EMPLEADO%FOUND
LOOP
DBMS_OUTPUT.PUT_LINE(REG_EMPLE.APELLIDO ||' '|| REG_EMPLE.FECHA_ALT);
FETCH EMPLEADO INTO REG_EMPLE;
END LOOP;
CLOSE EMPLEADO;
END;

--EJERCICIO 16
CREATE OR REPLACE PROCEDURE SUMA_NUMEROS(N1 NUMBER, N2 NUMBER)IS
BEGIN
DBMS_OUTPUT.PUT_LINE(N1+N2);
END;
EXECUTE SUMA_NUMEROS(1, 5);

--EJERCICIO 17
CREATE OR REPLACE PROCEDURE SUMA_5_NUMEROS(N1 NUMBER, N2 NUMBER, N3 NUMBER, N4 NUMBER, N5 NUMBER)IS
BEGIN
DBMS_OUTPUT.PUT_LINE(N1+N2+N3+N4+N5);
END;
EXECUTE SUMA_5_NUMEROS(1, 5, 4, 4, 9);

--EJERCICIO 18
CREATE OR REPLACE PROCEDURE BORRAR_EMPLE(V_EMP_NO EMPLE.EMP_NO%TYPE) AS
BEGIN
DELETE FROM EMPLE WHERE EMP_NO=V_EMP_NO;
END;
SELECT * FROM EMPLE;
EXECUTE BORRAR_EMPLE(1256);

--EJERCICIO 19
CREATE OR REPLACE PROCEDURE CAMBIAR_LOC (V_DEPT_NO DEPART.DEPT_NO%TYPE, V_LOC DEPART.LOC%TYPE) AS
BEGIN
UPDATE DEPART SET LOC=V_LOC WHERE DEPT_NO=V_DEPT_NO;

END;
SELECT * FROM DEPART;
INSERT INTO DEPART VALUES(50, 'HOLA', 'VITORIA');
EXECUTE CAMBIAR_LOC(50, 'LOGRONO');

--EJERCICIO 20
SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE= 'PROCEDURE' OR OBJECT_TYPE= 'FUNCTION';

--EJERCICIO 21
CREATE OR REPLACE PROCEDURE INCREMENTAR_SUELDO(V_EMP_NO EMPLE.EMP_NO%TYPE, V_INCR EMPLE.SALARIO%TYPE) AS
BEGIN
UPDATE EMPLE SET SALARIO=SALARIO+V_INCR WHERE EMP_NO=V_EMP_NO;
IF SQL%NOTFOUND THEN 
DBMS_OUTPUT.PUT_LINE('NINGUN ELEMENTO CAMBIADO');
END IF;
END;
EXECUTE INCREMENTAR_SUELDO(1234, 1000);
SELECT * FROM EMPLE;

--EJERCICIO 22
CREATE OR REPLACE FUNCTION SUELDO_MENSUAL(SALARIO EMPLE.SALARIO%TYPE, COMISION EMPLE.COMISION%TYPE)
RETURN NUMBER AS
BEGIN
RETURN(NVL(SALARIO,0)+NVL(COMISION,0))*12;
END;
SELECT APELLIDO, SUELDO_MENSUAL(SALARIO, COMISION) FROM EMPLE;

--EJERCICIO 23

CREATE OR REPLACE FUNCTION FACTORIAL(N NUMBER) RETURN NUMBER AS
FACTOR NUMBER:=1;
BEGIN
FOR I IN 1..N
LOOP
FACTOR:= FACTOR * I;
END LOOP;
RETURN FACTOR;
END;


SELECT FACTORIAL(10) FROM DUAL;

COMMIT;

--. EJERCICIO 24
SET SERVEROUTPUT ON;

CREATE OR REPLACE FUNCTION VALIDAR_DEPT_NO(V_DEPT_NO DEPART.DEPT_NO%TYPE) RETURN BOOLEAN AS
BEGIN
FOR DEPARTAMENTO IN (SELECT DEPT_NO FROM DEPART)
LOOP
IF DEPARTAMENTO.DEPT_NO = V_DEPT_NO THEN
RETURN TRUE;
END IF;
END LOOP;
RETURN FALSE;
END;

CREATE OR REPLACE PROCEDURE 
NUEVO_EMP(APELLIDO EMPLE.APELLIDO%TYPE, 
EMP_NO EMPLE.EMP_NO%TYPE, 
DEPT_NO EMPLE.DEPT_NO%TYPE) AS
BEGIN
  IF VALIDAR_DEPT_NO(DEPT_NO) THEN
  DBMS_OUTPUT.PUT_LINE('EXISTE DEPARTAMENTO, SE INTENTARA LA INSERCIÓN');
  INSERT INTO EMPLE (APELLIDO, EMP_NO, DEPT_NO) VALUES(APELLIDO, EMP_NO, DEPT_NO);
    IF SQL%FOUND THEN
    DBMS_OUTPUT.PUT_LINE('INSERCIÓN REALIZADA CON EXITO');
    END IF;
  ELSE
  DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO NO EXISTE');
  END IF;
END;
EXECUTE NUEVO_EMP('DIAZ', 1234, 50);
SELECT * FROM EMPLE;
SELECT * FROM DEPART;

--EJERCICIO 25
CREATE OR REPLACE FUNCTION DIF_SALARIO(V_EMP_NO EMPLE.EMP_NO%TYPE) RETURN NUMBER AS
DEPT_NO_EMPLE EMPLE.DEPT_NO%TYPE;
MAX NUMBER;
DIF NUMBER;
BEGIN
SELECT DEPT_NO INTO DEPT_NO_EMPLE FROM EMPLE WHERE EMP_NO=V_EMP_NO;
SELECT MAX(SALARIO)INTO MAX FROM EMPLE WHERE DEPT_NO=DEPT_NO_EMPLE;
SELECT MAX-SALARIO INTO DIF FROM EMPLE WHERE EMP_NO=V_EMP_NO;
RETURN DIF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN -1;
END;

BEGIN 
DBMS_OUTPUT.PUT_LINE(DIF_SALARIO(1235));
END;

--EJERCICIO 26
ALTER TABLE MENSAJES ADD(MENSAJES VARCHAR2(50), FECHA DATE);
DESC MENSAJES;

CREATE OR REPLACE PROCEDURE APELLIDO_SALARIO(V_SALARIO EMPLE.SALARIO%TYPE)AS
V_APELLIDO EMPLE.APELLIDO%TYPE;
BEGIN
SELECT APELLIDO INTO V_APELLIDO FROM EMPLE WHERE SALARIO=V_SALARIO;
INSERT INTO MENSAJES (MENSAJES, FECHA) VALUES(v_apellido ||' '||V_SALARIO, SYSDATE);
EXCEPTION
WHEN NO_DATA_FOUND THEN
INSERT INTO MENSAJES (MENSAJES, FECHA) VALUES('Ningún empleado con el salario '||V_SALARIO, SYSDATE);
WHEN TOO_MANY_ROWS THEN
INSERT INTO MENSAJES (MENSAJES, FECHA) VALUES('Más de un empleado con el salario '||V_SALARIO, SYSDATE);
when others then
INSERT INTO MENSAJES (MENSAJES, FECHA) VALUES('Otro error desconocido', SYSDATE);
END;
EXECUTE APELLIDO_SALARIO(NULL);
EXECUTE APELLIDO_SALARIO(650000);
EXECUTE APELLIDO_SALARIO(293150);
SELECT * FROM MENSAJES;
SELECT * FROM EMPLE;

--EJERCICIO 27
CREATE OR REPLACE PROCEDURE EMPLES_1000(V_SALARIO EMPLE.SALARIO%TYPE)AS
APELLIDO EMPLE.APELLIDO%TYPE;
VARIOS_EMPLES EXCEPTION;
NUM_EMPLE NUMBER;
BEGIN
SELECT APELLIDO INTO APELLIDO FROM EMPLE WHERE SALARIO BETWEEN V_SALARIO-1000 AND V_SALARIO+1000;
DBMS_OUTPUT.PUT_LINE(APELLIDO);
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('NINGUN EMPLEADO EN ESTE RANGO');
WHEN TOO_MANY_ROWS THEN
SELECT COUNT(APELLIDO) INTO NUM_EMPLE FROM EMPLE WHERE SALARIO BETWEEN V_SALARIO-1000 AND V_SALARIO+1000;
DBMS_OUTPUT.PUT_LINE(NUM_EMPLE);
END;
EXECUTE EMPLES_1000(293150);

---EJERCICIO 28
CREATE OR REPLACE PROCEDURE altaemp(
	p_num emple.emp_no%TYPE,
	p_ape emple.apellido%TYPE,
	p_ofi emple.oficio%TYPE,
	p_jef emple.dir%TYPE,
	p_fec emple.fecha_alt%TYPE,
	p_sal emple.salario%TYPE,
	p_com emple.comision%TYPE DEFAULT NULL,
	p_dep emple.dept_no%TYPE)
AS
	vjef EMPLE.DIR%TYPE DEFAULT NULL;
	vdep DEPART.DEPT_NO%TYPE DEFAULT NULL;
	
BEGIN
	/* Comprobación de que existe el departamento */
	SELECT dept_no INTO vdep 
	FROM depart 
	WHERE dept_no = p_dep;

	/* Comprobación de que existe el jefe del empleado */
	SELECT emp_no INTO vjef  
    FROM emple 
	WHERE emp_no = p_jef;

	/* Inserción de la fila */	
    INSERT INTO EMPLE VALUES (p_num, p_ape, p_ofi, p_jef, p_fec, p_sal, p_com, p_dep);
    COMMIT;
	
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		IF vdep IS NULL THEN
			DBMS_OUTPUT.PUT_LINE('Err. Departamento inexistente');
		ELSIF vjef IS NULL THEN
			DBMS_OUTPUT.PUT_LINE('Err. No existe el jefe');
		END IF;
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Err.numero de empleado duplicado');
	 WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error inesperado');
END altaemp;
EXECUTE ALTAEMP(9839,'SDFV','ACVDS',7839,SYSDATE,23424234,NULL,70);
SELECT * FROM EMPLE;

--EJERCICIO 29
CREATE TABLE AVISOS(MENSAJE VARCHAR2(50), FECHA DATE);
CREATE OR REPLACE PROCEDURE DEMASIADOS_EMPLE(V_EMP_NO EMPLE.EMP_NO%TYPE)AS
V_DEPT_NO EMPLE.DEPT_NO%TYPE;
NUM_EMPLES NUMBER;
DEMASIADO_EMPLES EXCEPTION;
BEGIN
SELECT DEPT_NO INTO V_DEPT_NO FROM EMPLE WHERE EMP_NO=V_EMP_NO;
SELECT COUNT(APELLIDO) INTO NUM_EMPLES FROM EMPLE WHERE DEPT_NO=V_DEPT_NO;
IF NUM_EMPLES>5 THEN
RAISE DEMASIADO_EMPLES;
END IF;
EXCEPTION 
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('EL EMPLEADO NO EXISTE');
INSERT INTO AVISOS VALUES('EL EMPLEADO NO EXISTE', SYSDATE);
WHEN DEMASIADO_EMPLES THEN
DBMS_OUTPUT.PUT_LINE('DEMASIADOS CURRELAS EN ESE DEPARTAMENTO');
INSERT INTO AVISOS VALUES('DEMASIADOS CURRELAS EN ESE DEPARTAMENTO', SYSDATE);
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('OTRO ERROR');
INSERT INTO AVISOS VALUES('OTRO ERROR', SYSDATE);
END;
EXECUTE DEMASIADOS_EMPLE(7654);
SELECT * FROM EMPLE;
SELECT * FROM AVISOS;

-- EJERCICIO 30
DESC EMPLE;
CREATE TABLE SUELDOS(SALARIO NUMBER(10));

CREATE OR REPLACE PROCEDURE SUELDOS_MAS_ALTOS(N NUMBER) AS
CONTADOR NUMBER:=N;
BEGIN
FOR SALARIOS IN(SELECT DISTINCT SALARIO FROM EMPLE ORDER BY SALARIO DESC)
LOOP
  IF CONTADOR>0 THEN
  INSERT INTO SUELDOS VALUES(SALARIOS.SALARIO);
  END IF;
  CONTADOR:=CONTADOR-1;
END LOOP;
EXCEPTION
	WHEN CURSOR_ALREADY_OPEN THEN
		DBMS_OUTPUT.PUT_LINE('Err.el cursor ya esta siendo utilizado');
	WHEN INVALID_CURSOR THEN
	DBMS_OUTPUT.PUT_LINE('Err.operacion inadecuada sobre el cursor');
	when others then
  DBMS_OUTPUT.PUT_LINE('Error inesperado');
END;

EXECUTE SUELDOS_MAS_ALTOS (3);
SELECT * FROM SUELDOS;
TRUNCATE TABLE SUELDOS;

--   TRIGGERS  --
--EJERCICIO 1

CREATE TABLE AUDITAR (USUARIO VARCHAR2(20), FECHA DATE);

CREATE OR REPLACE TRIGGER AUDITAR AFTER LOGON ON SCHEMA 
BEGIN
INSERT INTO AUDITAR VALUES(USER, SYSTIMESTAMP);
END;
SELECT * FROM AUDITAR;

--EJERCICIO 2
CREATE OR REPLACE TRIGGER COMI 
BEFORE INSERT ON EMPLE 
FOR EACH ROW WHEN (NEW.COMISION=0)
BEGIN
DBMS_OUTPUT.PUT_LINE('SE MODIFICA LA COMISION A 1');
:NEW.COMISION:=1;
END;

SET SERVEROUTPUT ON;
EXECUTE ALTAEMP(9839,'SDFV','ACVDS',7839,SYSDATE,23424234,0,40);
DELETE FROM EMPLE WHERE EMP_NO=9839;

--EJERCICIO 3
CON EL ANTERIOR

--EJERCICIO 4
CREATE TABLE USER_MOD(USUARIO VARCHAR2(20), FECHA DATE);
ALTER TABLE USER_MOD ADD OPERACION VARCHAR2(10);

CREATE OR REPLACE TRIGGER USUARIO_MOD AFTER DELETE OR INSERT OR UPDATE ON EMPLE
BEGIN
IF INSERTING THEN
INSERT INTO USER_MOD VALUES(USER, SYSDATE, 'INSERT');
END IF;
IF DELETING THEN
INSERT INTO USER_MOD VALUES(USER, SYSDATE, 'DELETE');
END IF;
IF UPDATING THEN
INSERT INTO USER_MOD VALUES(USER, SYSDATE, 'UPDATE');
END IF;
END;
DELETE FROM EMPLE WHERE EMP_NO=1234;
SELECT * FROM USER_MOD;
SELECT * FROM EMPLE;

CREATE OR REPLACE TRIGGER NO_VENTAS BEFORE INSERT ON EMPLE FOR EACH ROW
DECLARE
V_DEPT_NO EMPLE.DEPT_NO%TYPE;
BEGIN
SELECT DEPT_NO INTO V_DEPT_NO FROM DEPART WHERE DNOMBRE='VENTAS';
IF :NEW.DEPT_NO=V_DEPT_NO THEN
:NEW.DEPT_NO:=50;
END IF;

END;
SELECT * FROM DEPART;
EXECUTE ALTAEMP(9839,'SDFV','ACVDS',7839,SYSDATE,23424234,0,30);
SELECT * FROM EMPLE;
ALTER TRIGGER NO_VENTAS DISABLE;

SELECT * FROM USER_TRIGGERS;

-- EJERCICIO 6
CREATE OR REPLACE TRIGGER LIM_AUMENTO_SALARIO BEFORE UPDATE ON EMPLE FOR EACH ROW
BEGIN
IF :NEW.SALARIO > :OLD.SALARIO+:OLD.SALARIO/20 THEN
:NEW.SALARIO:=:OLD.SALARIO;
END IF;
END;
UPDATE EMPLE SET SALARIO=800000 WHERE EMP_NO=7369;

--EJERCICIO 7
CREATE OR REPLACE TRIGGER TOPE_JEFE BEFORE INSERT ON EMPLE FOR EACH ROW
DECLARE
V_NUM_ESCLAVOS NUMBER;
BEGIN
SELECT COUNT(*) INTO V_NUM_ESCLAVOS FROM EMPLE WHERE :NEW.DIR=DIR;
IF V_NUM_ESCLAVOS>=5 THEN
DBMS_OUTPUT.PUT_LINE('DEMASIADO SÉQUITO');
:NEW.DIR:=NULL;
END IF;
END;
EXECUTE ALTAEMP(0839,'SDFV','ACVDS',7839,SYSDATE,23424234,0,30);

--EJERCICIO 8
CREATE VIEW VISTA_NUM_EMPLE_DNOMBRE AS SELECT EMPLE.EMP_NO, DEPART.DNOMBRE FROM EMPLE, DEPART WHERE EMPLE.DEPT_NO=DEPART.DEPT_NO; 

SELECT * FROM VISTA_NUM_EMPLE_DNOMBRE;
SELECT * FROM DEPART;

CREATE OR REPLACE TRIGGER INSERT_A_VISTA_NUM INSTEAD OF INSERT ON VISTA_NUM_EMPLE_DNOMBRE
DECLARE 
V_DEPT_NO DEPART.DEPT_NO%TYPE;
BEGIN
SELECT DEPT_NO INTO V_DEPT_NO FROM DEPART WHERE DNOMBRE=:NEW.DNOMBRE;
INSERT INTO EMPLE(EMP_NO, DEPT_NO) VALUES(:NEW.EMP_NO, V_DEPT_NO);
EXCEPTION
WHEN NO_DATA_FOUND THEN
SELECT MAX(DEPT_NO)+10 INTO V_DEPT_NO FROM DEPART;
INSERT INTO DEPART VALUES(V_DEPT_NO, :NEW.DNOMBRE, NULL);
INSERT INTO EMPLE(EMP_NO, DEPT_NO) VALUES(:NEW.EMP_NO, V_DEPT_NO);
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('OTRO ERROR');
END;

INSERT INTO VISTA_NUM_EMPLE_DNOMBRE VALUES(0100, 'FISICA');

--EJERCICIO 9

CREATE 